# This file must be used with "source bin/activate" *from bash*
# you cannot run it directly
# modified to also set LD_LIBRARY_PATH, PYTHONPATH, PYTHONHOME and
# fix up hard-wired virtual environment #! paths

deactivate () {
    # reset old environment variables
    if [ -n "${_OLD_VIRTUAL_PATH:-}" ] ; then
        PATH="${_OLD_VIRTUAL_PATH:-}"
        export PATH
        unset _OLD_VIRTUAL_PATH
    fi
    if [ -n "${_OLD_VIRTUAL_PYTHONHOME:-}" ] ; then
        PYTHONHOME="${_OLD_VIRTUAL_PYTHONHOME:-}"
        export PYTHONHOME
        unset _OLD_VIRTUAL_PYTHONHOME
    fi

    # This should detect bash and zsh, which have a hash command that must
    # be called to get it to forget past commands.  Without forgetting
    # past commands the $PATH changes we made may not be respected
    if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ] ; then
        hash -r
    fi

    if [ -n "${_OLD_VIRTUAL_PS1:-}" ] ; then
        PS1="${_OLD_VIRTUAL_PS1:-}"
        export PS1
        unset _OLD_VIRTUAL_PS1
    fi

    unset VIRTUAL_ENV
    if [ ! "$1" = "nondestructive" ] ; then
    # Self destruct!
        unset -f deactivate
    fi
}

# unset irrelevant variables
deactivate nondestructive

# work out where we're running from, adjust environment and hard-coded paths accordingly
scriptfile="$(readlink --canonicalize --no-newline "$BASH_SOURCE")"
scriptdir="$(dirname "$scriptfile")"
basedir="$(dirname $(dirname "$scriptdir"))"
echo "running activation script: $scriptfile"
# use virtual env pip to check #! paths
pipbangstr=$(head -1 $scriptdir/pip)
pippath="$(dirname ${pipbangstr#\#\!})"
pipbase="$(dirname $(dirname "$pippath"))"

VIRTUAL_ENV="${basedir}/env"
export VIRTUAL_ENV
echo "activating python virtual environment: $VIRTUAL_ENV"

# a few basic checks for logging helpfulness
if [ ! -x "${VIRTUAL_ENV}/bin/python3" ] ; then
    echo "Warning: can't locate python3 binary at ${VIRTUAL_ENV}/bin/python3"
    echo "Stopping."
    return 1
fi
if [ ! -x "${VIRTUAL_ENV}/bin/jira-agile-metrics" ] ; then
    echo "Warning: can't locate jira-agile-metrics binary at ${VIRTUAL_ENV}/bin/jira-agile-metrics"
    echo "Stopping."
    return 1
fi

# fix hardwired #! paths if required
if [ "$pipbase" != "$basedir" ] ; then
    pushd ${VIRTUAL_ENV}/bin > /dev/null
    filelist="$(grep -d skip -l -e \#\!${pipbase}\/ *)"
    sedcmd="1,1s#${pipbase}/#${basedir}/#"
    for f in $filelist ; do
        echo "----- updating $f from ${pipbase}/ to ${basedir}/"
        sed -i "${sedcmd}" $f
    done
    popd > /dev/null
fi

# added LD_LIBRARY_PATH to locate libpython3.6m.so.1.0 for python3 launch
_OLD_VIRTUAL_LLPATH="$LD_LIBRARY_PATH"
LD_LIBRARY_PATH="${VIRTUAL_ENV}/lib64:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH

_OLD_VIRTUAL_PATH="$PATH"
PATH="$VIRTUAL_ENV/bin:$PATH"
export PATH

# unset PYTHONHOME if set
# this will fail if PYTHONHOME is set to the empty string (which is bad anyway)
# could use `if (set -u; : $PYTHONHOME) ;` in bash
if [ -n "${PYTHONHOME:-}" ] ; then
    _OLD_VIRTUAL_PYTHONHOME="${PYTHONHOME:-}"
    unset PYTHONHOME
fi

# added PYTHONHOME and PYTHONPATH for full standalone operation
export PYTHONHOME=${VIRTUAL_ENV}/lib/python3.6
export PYTHONPATH=${VIRTUAL_ENV}/lib/python3.6:${VIRTUAL_ENV}/lib/python3.6/site-packages:${VIRTUAL_ENV}/lib/python3.6/lib-dynload

if [ -z "${VIRTUAL_ENV_DISABLE_PROMPT:-}" ] ; then
    _OLD_VIRTUAL_PS1="${PS1:-}"
    if [ "x(env) " != x ] ; then
	PS1="(env) ${PS1:-}"
    else
    if [ "`basename \"$VIRTUAL_ENV\"`" = "__" ] ; then
        # special case for Aspen magic directories
        # see http://www.zetadev.com/software/aspen/
        PS1="[`basename \`dirname \"$VIRTUAL_ENV\"\``] $PS1"
    else
        PS1="(`basename \"$VIRTUAL_ENV\"`)$PS1"
    fi
    fi
    export PS1
fi

# This should detect bash and zsh, which have a hash command that must
# be called to get it to forget past commands.  Without forgetting
# past commands the $PATH changes we made may not be respected
if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ] ; then
    hash -r
fi
